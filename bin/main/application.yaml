server:
  port: 10000

spring:
  application:
    name: member-service
  profiles:
    active: dev
#-------------------------------------------------------------------------------
# MySQL-Server & JPA 설정
#------------------------------------------------------------------------------

  #-----------------------------------------------------------------------
  # Quarkus 기반 Keycloak-Server 을 이용한 인증 처리
  # issuer-uri : 토큰을 발급한 주체(issuer)
  # jwk-set-uri : Keycloak이 사용하는 공개 키 목록을 제공하는 주소로, Spring Security는 이 경로에서 JWT 서명을 검증하기 위한 공개키를 받아온다.
  # curl -i http://localhost:8080/realms/react-app/.well-known/openid-configuration
  #-----------------------------------------------------------------------
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/realms/inkcloud
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs
          # jwk-set-uri: http://keycloak:8080/realms/test-realm/protocol/openid-connect/certs
          
  datasource:   
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/member_db?serverTimezone=Asia/Seoul&characterEncoding=utf8
    username: root
    password: 1234  
    hikari:
      connection-timeout: 20000  # 20초
      maximum-pool-size: 10
      initialization-fail-timeout: 0  # 연결 실패해도 앱이 죽지 않게

  jpa:
    hibernate:
      ddl-auto: update   # create-drop : Application이 종료 될 때 모든 테이블을 drop 시켜준다.    
    # show-sql: true     # 콘솔에 출력
    properties:
      hibernate:  
        "[format_sql]": true

  logging:  
    level:
      root: info
      "[org.hibernate.SQL]": debug             # 로그로 출력
      "[org.hibernate.orm.jdbc.bind]": trace   # 중요 : 바인딩된 값 출력
      '[com.mzc.member_service]': INFO

# Redis 설정
  data:
    redis:
      host: localhost
      port: 6379
      # password: (설정했다면 입력)

  # SMTP 메일 설정 
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail.smtp.auth: true
      mail.smtp.starttls.enable: true

#-------------------------------------------------------------------------------
# Eureka-Server 에 자가 등록 설정
#-------------------------------------------------------------------------------

eureka:
  instance:
    instance-id: ${spring.application.name}:${spring.cloud.client.hostname}:${server.port}
    prefer-ip-address: true   # Eureka 클라이언트가 자신을 등록할 때, 호스트 이름 대신 IP 주소를 사용하여 서비스 레지스리에 등록한다.
  client:  
    register-with-eureka: true  
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka
